#BlueJ class context
comment0.target=Kommunikationspuffer
comment0.text=\r\n\ Der\ Kommunikationspuffer\ soll\ die\ Anwendungsschicht\ von\ der\ low\ level\ Kommunikation\ \u00FCber\ TCP\ trennen.\r\n\ \r\n\ Je\ Verbindung\ gibt\ es\ einen\ Eingangs-\ und\ einen\ Ausgangspuffer.\r\n\ Diese\ werden\ mit\ add()\ und\ get()-Operationen\ entsprechend\ des\ FIFO-Prinzips\ verarbeitet.\r\n\ (FIFO\:\ first-in-first-out,\ wie\ eine\ normale\ Warteschlange)\r\n\ \r\n\ @author\ LK\r\n\ @version\ 2021-09-30\r\n
comment1.params=socket
comment1.target=Kommunikationspuffer\ getAusgang(java.net.Socket)
comment1.text=\r\n\ Bestimmt\ den\ zur\ Socket\ geh\u00F6renden\ Ausgangspuffer.\ Ist\ dieser\ nicht\ vorhanden,\ so\ wird\ ein\ neuer\ erzeugt.\r\n\ @param\ socket\ Socket\ zu\ der\ der\ Ausgangspuffer\ gesucht\ wird\r\n\ @return\ Ausgangspuffer\ zur\ Socket\r\n
comment10.params=
comment10.target=int\ size()
comment10.text=\r\n\ Bestimmt\ die\ Anzahl\ der\ Elemente\ im\ Puffer.\r\n\ @return\ Anzahl\ Elemente\ im\ Puffer\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Ausgabe\ des\ Objektinhalts\ als\ Zeichenkette.<p>\r\n\ \u00DCberschreibt\ die\ Methode\ toString()\ von\ <code>Object</code>.\r\n
comment2.params=socket
comment2.target=Kommunikationspuffer\ getEingang(java.net.Socket)
comment2.text=\r\n\ Bestimmt\ den\ zur\ Socket\ geh\u00F6renden\ Eingangspuffer.\ Ist\ dieser\ nicht\ vorhanden,\ so\ wird\ ein\ neuer\ erzeugt.\r\n\ @param\ socket\ Socket\ zu\ der\ der\ Eingangspuffer\ gesucht\ wird\r\n\ @return\ Eingangspuffer\ zur\ Socket\r\n
comment3.params=
comment3.target=java.util.HashMap\ getAusg\u00E4nge()
comment3.text=\r\n\ Gibt\ alle\ Ausg\u00E4nge\ zur\u00FCck.\r\n\ @return\ alle\ Ausg\u00E4nge\r\n
comment4.params=
comment4.target=java.util.HashMap\ getEing\u00E4nge()
comment4.text=\r\n\ Gibt\ alle\ Eing\u00E4nge\ zur\u00FCck.\r\n\ @return\ alle\ Eing\u00E4nge\r\n
comment5.params=
comment5.target=java.util.Set\ getSocketsEingang()
comment5.text=\r\n\ Gibt\ die\ Menge\ aller\ Sockets\ zur\u00FCck\ f\u00FCr\ die\ es\ einen\ Eingangspuffer\ gibt.\r\n
comment6.params=
comment6.target=java.util.Set\ getSocketsAusgang()
comment6.text=\r\n\ Gibt\ die\ Menge\ aller\ Sockets\ zur\u00FCck\ f\u00FCr\ die\ es\ einen\ Ausgangspuffer\ gibt.\r\n
comment7.params=socket
comment7.target=Kommunikationspuffer(java.net.Socket)
comment7.text=\r\n\ Konstruktor\ f\u00FCr\ Objekte\ der\ Klasse\ ZKommunikation\r\n
comment8.params=str
comment8.target=void\ add(java.lang.String)
comment8.text=\r\n\ F\u00FCgt\ ein\ neues\ Datenpaket\ in\ den\ Puffer\ ein.\r\n\ @param\ neues\ Datenpaket\r\n
comment9.params=
comment9.target=java.lang.String\ get()
comment9.text=\r\n\ Gibt\ das\ erste\ Element\ im\ Puffer\ zur\u00FCck\ und\ entfernt\ dieses\ aus\ dem\ Puffer.\r\n\ @return\ erstes\ Element\ oder\ null,\ wenn\ keine\ Daten\ im\ Puffer\ vorliegen\r\n
numComments=12
